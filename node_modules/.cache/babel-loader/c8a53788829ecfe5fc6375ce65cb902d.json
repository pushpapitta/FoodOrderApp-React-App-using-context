{"ast":null,"code":"var _jsxFileName = \"/Users/shanthakumarpitta/Downloads/FoodOrderApp/src/Components/Meals/AvailableMeals.js\",\n    _s = $RefreshSig$();\n\n//here we have available meals,dont need props coz we wont recieve any data here.\n//for now we work with some dummy data .\nimport { useEffect, useState } from 'react';\nimport classes from './AvailableMeals.module.css';\nimport Card from '../UI/Card';\nimport MealItem from './MealItem/MealItem';\nimport { response } from 'express';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = () => {\n  _s();\n\n  const [meals, setMeals] = useState([]); //we want to fetch the data,when this component is loaded-this is a side effect so\n  // we use useEffect.sending a request to rest api.fetch returns a promise\n\n  useEffect(() => {\n    const fetchMeals = async () => {\n      await fetch('https://pushpa-react-http-default-rtdb.firebaseio.com/meals.json');\n      const responseData = response.json();\n      const loadedMeals = [];\n\n      for (const key in responseData) {\n        loadedMeals.push({\n          id: key,\n          name: responseData[key].name,\n          description: responseData[key].description,\n          price: responseData[key].price\n        });\n      }\n\n      setMeals(loadedMeals);\n    };\n\n    fetchMeals();\n  }, []); //for every meal, we re retrning a meal jsx element\n  //const mealsList = DUMMY_MEALS.map((meal) => <li> {meal.name} </li>);\n\n  const mealsList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    id: meal.id,\n    name: meal.name,\n    description: meal.description,\n    price: meal.price\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AvailableMeals, \"an3554G5PYiaii/PlvHt6YA7hZs=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["/Users/shanthakumarpitta/Downloads/FoodOrderApp/src/Components/Meals/AvailableMeals.js"],"names":["useEffect","useState","classes","Card","MealItem","response","AvailableMeals","meals","setMeals","fetchMeals","fetch","responseData","json","loadedMeals","key","push","id","name","description","price","mealsList","map","meal"],"mappings":";;;AAAA;AACA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,SAASC,QAAT,QAAyB,SAAzB;;;AAKA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC,CADyB,CAEzB;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,UAAU,GAAG,YAAY;AAC3B,YAAMC,KAAK,CAAC,kEAAD,CAAX;AACA,YAAMC,YAAY,GAAGN,QAAQ,CAACO,IAAT,EAArB;AAEA,YAAMC,WAAW,GAAG,EAApB;;AAEA,WAAK,MAAMC,GAAX,IAAkBH,YAAlB,EAAgC;AAC5BE,QAAAA,WAAW,CAACE,IAAZ,CAAiB;AACbC,UAAAA,EAAE,EAAEF,GADS;AAEbG,UAAAA,IAAI,EAAEN,YAAY,CAACG,GAAD,CAAZ,CAAkBG,IAFX;AAGbC,UAAAA,WAAW,EAAEP,YAAY,CAACG,GAAD,CAAZ,CAAkBI,WAHlB;AAIbC,UAAAA,KAAK,EAAER,YAAY,CAACG,GAAD,CAAZ,CAAkBK;AAJZ,SAAjB;AAMH;;AACDX,MAAAA,QAAQ,CAACK,WAAD,CAAR;AACH,KAfD;;AAgBAJ,IAAAA,UAAU;AACb,GAlBQ,EAkBN,EAlBM,CAAT,CAJyB,CAuBzB;AACA;;AACA,QAAMW,SAAS,GAAGb,KAAK,CAACc,GAAN,CAAWC,IAAD,iBACxB,QAAC,QAAD;AACI,IAAA,EAAE,EAAEA,IAAI,CAACN,EADb;AAGI,IAAA,IAAI,EAAEM,IAAI,CAACL,IAHf;AAII,IAAA,WAAW,EAAEK,IAAI,CAACJ,WAJtB;AAKI,IAAA,KAAK,EAAEI,IAAI,CAACH;AALhB,KAESG,IAAI,CAACN,EAFd;AAAA;AAAA;AAAA;AAAA,UADc,CAAlB;AAUA,sBACI;AAAS,IAAA,SAAS,EAAEd,OAAO,CAACK,KAA5B;AAAA,2BACI,QAAC,IAAD;AAAA,6BACI;AAAA,kBACKa;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CA5CD;;GAAMd,c;;KAAAA,c;AA6CN,eAAeA,cAAf","sourcesContent":["//here we have available meals,dont need props coz we wont recieve any data here.\n//for now we work with some dummy data .\nimport { useEffect, useState } from 'react';\nimport classes from './AvailableMeals.module.css';\nimport Card from '../UI/Card';\nimport MealItem from './MealItem/MealItem';\nimport { response } from 'express';\n\n\n\n\nconst AvailableMeals = () => {\n    const [meals, setMeals] = useState([]);\n    //we want to fetch the data,when this component is loaded-this is a side effect so\n    // we use useEffect.sending a request to rest api.fetch returns a promise\n    useEffect(() => {\n        const fetchMeals = async () => {\n            await fetch('https://pushpa-react-http-default-rtdb.firebaseio.com/meals.json');\n            const responseData = response.json();\n\n            const loadedMeals = [];\n\n            for (const key in responseData) {\n                loadedMeals.push({\n                    id: key,\n                    name: responseData[key].name,\n                    description: responseData[key].description,\n                    price: responseData[key].price,\n                });\n            }\n            setMeals(loadedMeals);\n        };\n        fetchMeals();\n    }, []);\n    //for every meal, we re retrning a meal jsx element\n    //const mealsList = DUMMY_MEALS.map((meal) => <li> {meal.name} </li>);\n    const mealsList = meals.map((meal) => (\n        <MealItem\n            id={meal.id}\n            key={meal.id}\n            name={meal.name}\n            description={meal.description}\n            price={meal.price}\n        />\n    ));\n\n    return (\n        <section className={classes.meals}>\n            <Card>\n                <ul>\n                    {mealsList}\n                </ul>\n            </Card>\n        </section>\n    );\n};\nexport default AvailableMeals;"]},"metadata":{},"sourceType":"module"}