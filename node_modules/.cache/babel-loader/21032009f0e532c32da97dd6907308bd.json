{"ast":null,"code":"var _jsxFileName = \"/Users/shanthakumarpitta/Downloads/FoodOrderApp/src/Components/Cart/Cart.js\",\n    _s = $RefreshSig$();\n\n//to render all cart items and also display total amount/\n//buttons for leaving the cart and to order\nimport { useContext } from 'react';\nimport classes from './Cart.module.css';\nimport Modal from '../UI/Modal';\nimport CartContext from '../../Store/cart-context'; //we want to render this cart in a modal using portals\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Cart = props => {\n  _s();\n\n  const cartCtx = useContext(CartContext); //totalamount which shd be outputted\n\n  const totalAmount = `$${cartCtx.totalAmount.toFixed(2)}`; //order Button to be shown up only when items in the cart\n\n  const hasItems = cartCtx.items.length > 0; //placing all the cartitems in an un-ordered list- javascript expression\n\n  const cartItems = /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: classes['cart-items'],\n    children: cartCtx.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: item.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this); //the cart should be inside of the modal wrapper\n\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: props.onClose,\n    children: [cartItems, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.total,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Total Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: totalAmount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes['button--alt'],\n        onClick: props.onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), !hasItems && /*#__PURE__*/_jsxDEV(\"button\", {\n        classNmae: classes.button,\n        children: \"Order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Cart, \"5vyuBAd9ctzs1tCKQUMcCu/LGtk=\");\n\n_c = Cart;\nexport default Cart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"sources":["/Users/shanthakumarpitta/Downloads/FoodOrderApp/src/Components/Cart/Cart.js"],"names":["useContext","classes","Modal","CartContext","Cart","props","cartCtx","totalAmount","toFixed","hasItems","items","length","cartItems","map","item","name","onClose","total","actions","button"],"mappings":";;;AAAA;AACA;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,0BAAxB,C,CACA;;;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AACpB,QAAMC,OAAO,GAAGN,UAAU,CAACG,WAAD,CAA1B,CADoB,CAEpB;;AACA,QAAMI,WAAW,GAAI,IAAGD,OAAO,CAACC,WAAR,CAAoBC,OAApB,CAA4B,CAA5B,CAA+B,EAAvD,CAHoB,CAIpB;;AACA,QAAMC,QAAQ,GAAGH,OAAO,CAACI,KAAR,CAAcC,MAAd,GAAuB,CAAxC,CALoB,CAMpB;;AACA,QAAMC,SAAS,gBACX;AAAI,IAAA,SAAS,EAAEX,OAAO,CAAC,YAAD,CAAtB;AAAA,cACKK,OAAO,CAACO,GAAR,CAAaC,IAAD,iBACT;AAAA,gBAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ,CAPoB,CAgBpB;;;AAEA,sBACI,QAAC,KAAD;AAAO,IAAA,OAAO,EAAEV,KAAK,CAACW,OAAtB;AAAA,eACKJ,SADL,eAEI;AAAK,MAAA,SAAS,EAAEX,OAAO,CAACgB,KAAxB;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAOV;AAAP;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAMI;AAAK,MAAA,SAAS,EAAEN,OAAO,CAACiB,OAAxB;AAAA,8BACI;AAAQ,QAAA,SAAS,EAAEjB,OAAO,CAAC,aAAD,CAA1B;AAA2C,QAAA,OAAO,EAAEI,KAAK,CAACW,OAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAIK,CAACP,QAAD,iBAAa;AAAQ,QAAA,SAAS,EAAER,OAAO,CAACkB,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJlB;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH,CAjCD;;GAAMf,I;;KAAAA,I;AAkCN,eAAeA,IAAf","sourcesContent":["//to render all cart items and also display total amount/\n//buttons for leaving the cart and to order\nimport { useContext } from 'react';\nimport classes from './Cart.module.css';\nimport Modal from '../UI/Modal';\nimport CartContext from '../../Store/cart-context';\n//we want to render this cart in a modal using portals\n\nconst Cart = (props) => {\n    const cartCtx = useContext(CartContext);\n    //totalamount which shd be outputted\n    const totalAmount = `$${cartCtx.totalAmount.toFixed(2)}`;\n    //order Button to be shown up only when items in the cart\n    const hasItems = cartCtx.items.length > 0;\n    //placing all the cartitems in an un-ordered list- javascript expression\n    const cartItems = (\n        <ul className={classes['cart-items']}>\n            {cartCtx.map((item) => (\n                <li>{item.name}</li>\n            )\n            )}\n        </ul>\n    );\n\n    //the cart should be inside of the modal wrapper\n\n    return (\n        <Modal onClose={props.onClose}>\n            {cartItems}\n            <div className={classes.total}>\n                <span>Total Amount</span>\n                <span>{totalAmount}</span>\n            </div>\n            <div className={classes.actions}>\n                <button className={classes['button--alt']} onClick={props.onClose}>\n                    Close\n                </button>\n                {!hasItems && <button classNmae={classes.button}>Order</button>}\n            </div>\n        </Modal>\n    );\n};\nexport default Cart;"]},"metadata":{},"sourceType":"module"}