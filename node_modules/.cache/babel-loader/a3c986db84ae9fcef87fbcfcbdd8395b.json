{"ast":null,"code":"var _jsxFileName = \"/Users/shanthakumarpitta/Downloads/FoodOrderApp/src/Store/CartProvider.js\",\n    _s = $RefreshSig$();\n\n//here we add a cartProvider Component -the goal of this component is to manage the cart Context data\n//and provide that cartContext to all components that want access to it.\nimport { useReducer } from 'react';\nimport CartContext from \"./cart-context\"; //object where we say there are no items,0 amount\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n}; //state(last state snapshot of the state managed by reactreducer) ,we manage the action\n//this reducer will then return a newstate\n//updatedItems is an array,on item-call concat-which add new item to array-it dosnt edit existing array\n//but returns new array\n//we are updating our state in an immutable way.\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD_CART_ITEM') {\n    const updatedItems = state.items.concat(action.item);\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount; //with above 2 i/ps-new state snapshot is return\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n}; //CartContext will be accesable by all children wrapperd by this provider\n\n\nconst CartProvider = props => {\n  _s();\n\n  //usereducer returns exactly array with 2 elemets-1st element is always the state snapshot\n  //2nd-function which allows u to dispatch an action.\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState); //whenever this is called,we get item that needs to be added to cart,\n  //then we need to check-if that item is already in cart(update it),or it is a new item\n  //we need to mangage this thing as - whole state of component,so any components affected byt his\n  //cartContext will be re-evaluated,whenever cart data changes.(usestate/useReducer)\n  //(item :item is coming from argument (item)\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD_CART_ITEM',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE_CART_ITEM',\n      id: id\n    });\n  }; //cartContext is an object-this object will be set as avalue to cartcontext provider\n  //we use cartState(items:cartState,items and totalamount) here to get data dynamically-\n  //then start dispatching action\n\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 13\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/shanthakumarpitta/Downloads/FoodOrderApp/src/Store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","updatedTotalAmount","price","amount","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","id","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA;AACA;AAEA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;;;AACA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAE,EADc;AAErBC,EAAAA,WAAW,EAAE;AAFQ,CAAzB,C,CAIA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACjC,UAAMC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAArB;AACA,UAAMC,kBAAkB,GAAGN,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAoBN,MAAM,CAACI,IAAP,CAAYG,MAA/E,CAFiC,CAGjC;;AACA,WAAO;AACHX,MAAAA,KAAK,EAAEM,YADJ;AAEHL,MAAAA,WAAW,EAAEQ;AAFV,KAAP;AAIH;;AACD,SAAOV,gBAAP;AACH,CAXD,C,CAaA;;;AACA,MAAMa,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAE5B;AACA;AAEA,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkClB,UAAU,CAACK,WAAD,EAAcH,gBAAd,CAAlD,CAL4B,CAO5B;AACA;AACA;AACA;AAEA;;AACA,QAAMiB,oBAAoB,GAAIR,IAAD,IAAU;AACnCO,IAAAA,kBAAkB,CAAC;AAAEV,MAAAA,IAAI,EAAE,eAAR;AAAyBG,MAAAA,IAAI,EAAEA;AAA/B,KAAD,CAAlB;AACH,GAFD;;AAGA,QAAMS,yBAAyB,GAAIC,EAAD,IAAQ;AACtCH,IAAAA,kBAAkB,CAAC;AAAEV,MAAAA,IAAI,EAAE,kBAAR;AAA4Ba,MAAAA,EAAE,EAAEA;AAAhC,KAAD,CAAlB;AACH,GAFD,CAhB4B,CAoB5B;AACA;AACA;;;AACA,QAAMC,WAAW,GAAG;AAChBnB,IAAAA,KAAK,EAAEc,SAAS,CAACd,KADD;AAEhBC,IAAAA,WAAW,EAAEa,SAAS,CAACb,WAFP;AAGhBmB,IAAAA,OAAO,EAAEJ,oBAHO;AAIhBK,IAAAA,UAAU,EAAEJ;AAJI,GAApB;AAOA,sBAAQ,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,WAA7B;AAAA,cACHN,KAAK,CAACS;AADH;AAAA;AAAA;AAAA;AAAA,UAAR;AAIH,CAlCD;;GAAMV,Y;;KAAAA,Y;AAmCN,eAAeA,YAAf","sourcesContent":["//here we add a cartProvider Component -the goal of this component is to manage the cart Context data\n//and provide that cartContext to all components that want access to it.\n\nimport { useReducer } from 'react';\nimport CartContext from \"./cart-context\";\n\n//object where we say there are no items,0 amount\nconst defaultCartState = {\n    items: [],\n    totalAmount: 0\n};\n//state(last state snapshot of the state managed by reactreducer) ,we manage the action\n//this reducer will then return a newstate\n//updatedItems is an array,on item-call concat-which add new item to array-it dosnt edit existing array\n//but returns new array\n//we are updating our state in an immutable way.\nconst cartReducer = (state, action) => {\n    if (action.type === 'ADD_CART_ITEM') {\n        const updatedItems = state.items.concat(action.item);\n        const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n        //with above 2 i/ps-new state snapshot is return\n        return {\n            items: updatedItems,\n            totalAmount: updatedTotalAmount\n        };\n    }\n    return defaultCartState;\n};\n\n//CartContext will be accesable by all children wrapperd by this provider\nconst CartProvider = (props) => {\n\n    //usereducer returns exactly array with 2 elemets-1st element is always the state snapshot\n    //2nd-function which allows u to dispatch an action.\n\n    const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n    //whenever this is called,we get item that needs to be added to cart,\n    //then we need to check-if that item is already in cart(update it),or it is a new item\n    //we need to mangage this thing as - whole state of component,so any components affected byt his\n    //cartContext will be re-evaluated,whenever cart data changes.(usestate/useReducer)\n\n    //(item :item is coming from argument (item)\n    const addItemToCartHandler = (item) => {\n        dispatchCartAction({ type: 'ADD_CART_ITEM', item: item });\n    };\n    const removeItemFromCartHandler = (id) => {\n        dispatchCartAction({ type: 'REMOVE_CART_ITEM', id: id });\n    };\n\n    //cartContext is an object-this object will be set as avalue to cartcontext provider\n    //we use cartState(items:cartState,items and totalamount) here to get data dynamically-\n    //then start dispatching action\n    const cartContext = {\n        items: cartState.items,\n        totalAmount: cartState.totalAmount,\n        addItem: addItemToCartHandler,\n        removeItem: removeItemFromCartHandler,\n\n    };\n    return (<CartContext.Provider value={cartContext}>\n        {props.children}\n    </CartContext.Provider>\n    );\n};\nexport default CartProvider;"]},"metadata":{},"sourceType":"module"}